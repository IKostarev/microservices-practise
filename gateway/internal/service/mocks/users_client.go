// Code generated by MockGen. DO NOT EDIT.
// Source: gateway/internal/service (interfaces: UsersServiceClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "gateway/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUsersServiceClient is a mock of UsersServiceClient interface.
type MockUsersServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockUsersServiceClientMockRecorder
}

// MockUsersServiceClientMockRecorder is the mock recorder for MockUsersServiceClient.
type MockUsersServiceClientMockRecorder struct {
	mock *MockUsersServiceClient
}

// NewMockUsersServiceClient creates a new mock instance.
func NewMockUsersServiceClient(ctrl *gomock.Controller) *MockUsersServiceClient {
	mock := &MockUsersServiceClient{ctrl: ctrl}
	mock.recorder = &MockUsersServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsersServiceClient) EXPECT() *MockUsersServiceClientMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUsersServiceClient) CreateUser(arg0 context.Context, arg1 *models.CreateUserDTO) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUsersServiceClientMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUsersServiceClient)(nil).CreateUser), arg0, arg1)
}

// DeleteUser mocks base method.
func (m *MockUsersServiceClient) DeleteUser(arg0 context.Context, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUsersServiceClientMockRecorder) DeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUsersServiceClient)(nil).DeleteUser), arg0, arg1)
}

// GetUserByID mocks base method.
func (m *MockUsersServiceClient) GetUserByID(arg0 context.Context, arg1 int) (*models.UserDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", arg0, arg1)
	ret0, _ := ret[0].(*models.UserDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockUsersServiceClientMockRecorder) GetUserByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockUsersServiceClient)(nil).GetUserByID), arg0, arg1)
}

// GetUserByUsername mocks base method.
func (m *MockUsersServiceClient) GetUserByUsername(arg0 context.Context, arg1 string) (*models.UserDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", arg0, arg1)
	ret0, _ := ret[0].(*models.UserDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockUsersServiceClientMockRecorder) GetUserByUsername(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockUsersServiceClient)(nil).GetUserByUsername), arg0, arg1)
}

// GetUserByUsernameOrEmail mocks base method.
func (m *MockUsersServiceClient) GetUserByUsernameOrEmail(arg0 context.Context, arg1, arg2 string) (*models.UserDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsernameOrEmail", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.UserDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsernameOrEmail indicates an expected call of GetUserByUsernameOrEmail.
func (mr *MockUsersServiceClientMockRecorder) GetUserByUsernameOrEmail(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsernameOrEmail", reflect.TypeOf((*MockUsersServiceClient)(nil).GetUserByUsernameOrEmail), arg0, arg1, arg2)
}

// UpdatePassword mocks base method.
func (m *MockUsersServiceClient) UpdatePassword(arg0 context.Context, arg1 *models.UpdateUserPasswordDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassword", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePassword indicates an expected call of UpdatePassword.
func (mr *MockUsersServiceClientMockRecorder) UpdatePassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*MockUsersServiceClient)(nil).UpdatePassword), arg0, arg1)
}

// UpdateUser mocks base method.
func (m *MockUsersServiceClient) UpdateUser(arg0 context.Context, arg1 *models.UserDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUsersServiceClientMockRecorder) UpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUsersServiceClient)(nil).UpdateUser), arg0, arg1)
}

// UserLogin mocks base method.
func (m *MockUsersServiceClient) UserLogin(arg0 context.Context, arg1 *models.UserLoginDTO) (*models.UserDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserLogin", arg0, arg1)
	ret0, _ := ret[0].(*models.UserDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserLogin indicates an expected call of UserLogin.
func (mr *MockUsersServiceClientMockRecorder) UserLogin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserLogin", reflect.TypeOf((*MockUsersServiceClient)(nil).UserLogin), arg0, arg1)
}
