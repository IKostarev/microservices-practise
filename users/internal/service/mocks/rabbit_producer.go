// Code generated by MockGen. DO NOT EDIT.
// Source: users/internal/service (interfaces: RabbitProducer)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRabbitProducer is a mock of RabbitProducer interface.
type MockRabbitProducer struct {
	ctrl     *gomock.Controller
	recorder *MockRabbitProducerMockRecorder
}

// MockRabbitProducerMockRecorder is the mock recorder for MockRabbitProducer.
type MockRabbitProducerMockRecorder struct {
	mock *MockRabbitProducer
}

// NewMockRabbitProducer creates a new mock instance.
func NewMockRabbitProducer(ctrl *gomock.Controller) *MockRabbitProducer {
	mock := &MockRabbitProducer{ctrl: ctrl}
	mock.recorder = &MockRabbitProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRabbitProducer) EXPECT() *MockRabbitProducerMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockRabbitProducer) Publish(arg0 []byte, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockRabbitProducerMockRecorder) Publish(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockRabbitProducer)(nil).Publish), arg0, arg1)
}
