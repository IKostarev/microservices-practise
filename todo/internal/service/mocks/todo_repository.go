// Code generated by MockGen. DO NOT EDIT.
// Source: todo/internal/service (interfaces: TodoRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	models "todo/internal/models"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockTodoRepository is a mock of TodoRepository interface.
type MockTodoRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTodoRepositoryMockRecorder
}

// MockTodoRepositoryMockRecorder is the mock recorder for MockTodoRepository.
type MockTodoRepositoryMockRecorder struct {
	mock *MockTodoRepository
}

// NewMockTodoRepository creates a new mock instance.
func NewMockTodoRepository(ctrl *gomock.Controller) *MockTodoRepository {
	mock := &MockTodoRepository{ctrl: ctrl}
	mock.recorder = &MockTodoRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTodoRepository) EXPECT() *MockTodoRepositoryMockRecorder {
	return m.recorder
}

// CreateToDo mocks base method.
func (m *MockTodoRepository) CreateToDo(arg0 context.Context, arg1 *models.CreateTodoDTO) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateToDo", arg0, arg1)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateToDo indicates an expected call of CreateToDo.
func (mr *MockTodoRepositoryMockRecorder) CreateToDo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateToDo", reflect.TypeOf((*MockTodoRepository)(nil).CreateToDo), arg0, arg1)
}

// DeleteToDo mocks base method.
func (m *MockTodoRepository) DeleteToDo(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteToDo", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteToDo indicates an expected call of DeleteToDo.
func (mr *MockTodoRepositoryMockRecorder) DeleteToDo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteToDo", reflect.TypeOf((*MockTodoRepository)(nil).DeleteToDo), arg0, arg1)
}

// GetToDo mocks base method.
func (m *MockTodoRepository) GetToDo(arg0 context.Context, arg1 uuid.UUID) (*models.TodoDAO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetToDo", arg0, arg1)
	ret0, _ := ret[0].(*models.TodoDAO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetToDo indicates an expected call of GetToDo.
func (mr *MockTodoRepositoryMockRecorder) GetToDo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToDo", reflect.TypeOf((*MockTodoRepository)(nil).GetToDo), arg0, arg1)
}

// GetToDos mocks base method.
func (m *MockTodoRepository) GetToDos(arg0 context.Context, arg1 uuid.UUID) ([]models.TodoDAO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetToDos", arg0, arg1)
	ret0, _ := ret[0].([]models.TodoDAO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetToDos indicates an expected call of GetToDos.
func (mr *MockTodoRepositoryMockRecorder) GetToDos(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToDos", reflect.TypeOf((*MockTodoRepository)(nil).GetToDos), arg0, arg1)
}

// UpdateToDo mocks base method.
func (m *MockTodoRepository) UpdateToDo(arg0 context.Context, arg1 *models.TodoDAO) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateToDo", arg0, arg1)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateToDo indicates an expected call of UpdateToDo.
func (mr *MockTodoRepositoryMockRecorder) UpdateToDo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateToDo", reflect.TypeOf((*MockTodoRepository)(nil).UpdateToDo), arg0, arg1)
}
